// Line Folower Robot (STEMBRIDGE)
// controller : Arduino nano
// driver     : TB6612
//

#include <EEPROM.h>
#include <SoftwareSerial.h>
#include <IRremote.h>

// motor's pins
const byte AIN1 = 7;    // direction of left motor
const byte AIN2 = 4;    // direction of left motor
const byte BIN1 = 8;    // direction of right motor
const byte BIN2 = 9;    // direction of right motor
const byte PWMA = 5;    // left motor PWM
const byte PWMB = 6;    // right motor PWM

const byte BUTTON = 10;
const byte NUM_SENS = 8;
const byte IR_PIN = 11;
const byte LED = 13;

// Bluetooth
const byte RXPIN = 3;
const byte TXPIN = 2;
SoftwareSerial BTSerial(RXPIN, TXPIN);

//IR sensors
IRrecv irrecv(IR_PIN);
decode_results results;

// pins PCB for Analog line
byte pins[] = {A7, A6, A5, A4, A3, A2, A1, A0};
int sensors[NUM_SENS];
int  Ws[] = { -7, -5, -3, -1, 1, 3, 5, 7};
float lastPos = 0;

// address in EEPROM to save and load calibrations
const unsigned ADDRESS = 400;
int calibratedMinimum[NUM_SENS];
int calibratedMaximum[NUM_SENS];

enum command {cmdLFR, cmdStop, cmdTest, cmdCalibr, cmdReadSensBT, cmdReadSensIR, cmdInfoBT, cmdInfoIR, cmdNo};

const int START_DELAY = 1000;
const char btSTART = 'l';
const char btSTOP = 's';
const char btCALIBR = 'c';
const char btREAD_SENS = 'r';
const char btTEST = 't';
const char btINFO = 'i';
const unsigned long irSTART = 0x219E609FL;
const unsigned long irSTOP = 0x219E48B7L;
const unsigned long irCALIBR = 0x11111111;
const unsigned long irREAD_SENS = 0x22222222;
const unsigned long irTEST = 0x33333333;
const unsigned long irINFO = 0x44444444;

// functions declaration
void drive(int left, int right);
void pinsSetup();
void readSensors();
bool pressButton();
void LFR();
void saveEEPROM();
void loadEEPROM();
int getCmdBT();
int getCmdIR();
void printInfoBT();
void printInfoSerial();

void setup() {
  pinsSetup();
  loadEEPROM();
  BTSerial.begin(9600);
  irrecv.enableIRIn(); // Start the receiver
}

const float Kp = 30;
const int SPEED = 150;

void loop() {
  int cmd = cmdNo;
  cmd = getCmdIR();
  cmd = getCmdBT();
  if (pressButton())  {
    cmd = cmdLFR;
  }
  //if (pressButton() || isCmdBT(btSTART) || isCmdIR(irSTART)) {
  //  cmd = cmdLFR;
  //}
  switch (cmd) {
    case cmdLFR:
      digitalWrite(LED, HIGH);
      delay(START_DELAY);
      LFR();
      digitalWrite(LED, LOW);
      break;
    case cmdCalibr:
      calibration();
      break;
    case cmdTest:
      break;
    case cmdInfoBT:
      printInfoBT();
      break;
    case cmdInfoIR:
      printInfoSerial();
      break;
    case cmdReadSensBT:
      break;
    case cmdReadSensIR:
      break;
      //...
  } // switch
}

void drive(int left, int right) {
  left = constrain(left, -255, 255);
  right = constrain(right, -255, 255);

  if (left >= 0) {
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
  }
  else {
    digitalWrite(AIN1, HIGH);
    digitalWrite(AIN2, LOW);
  }

  if (right >= 0) {
    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
  }
  else {
    digitalWrite(BIN1, HIGH);
    digitalWrite(BIN2, LOW);
  }
  analogWrite(PWMA, abs(left));
  analogWrite(PWMB, abs(right));
} // drive


void pinsSetup() {
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(BUTTON, INPUT_PULLUP);
}

void readSensors() {
  for (int i = 0; i < NUM_SENS; ++i) {
    sensors[i] = analogRead(pins[i]);
  }
}

bool pressButton() {
  return !digitalRead(BUTTON);
}

bool isCmdBT(char cmd) {
  if (BTSerial.available()) {
    char ch = BTSerial.read();
    if (ch == cmd) {
      return true;
    }
  }
  return false;
}

bool isCmdIR(unsigned long cmd) {
  if (irrecv.decode(&results)) {
    if (results.value == cmd) {
      irrecv.resume();
      return true;
    }
    irrecv.resume();
  }
  return false;
}

void LFR() {

  while (true) {
    if (isCmdBT(btSTOP) || isCmdIR(irSTOP)) {
      drive(0, 0);
      return;
    }
    readSensors();
    int sum = 0;
    int sW = 0;
    bool onLine = false;
    float pos = 0;

    for (int i = 0; i < NUM_SENS; ++i) {
      int value = sensors[i];
      if (value > 200) {
        onLine = true;
      }
      sum += sensors[i];
      sW += sensors[i] * Ws[i];
    }

    if (onLine == false) {
      if (lastPos > 0) {
        pos = Ws[NUM_SENS - 1];
      } else {
        pos = Ws[0];
      }
    } else {
      pos = sW  / (float) sum;
      lastPos = pos;
    }

    int delta = pos * Kp;
    drive(SPEED + delta, SPEED - delta);
  } // while
}

void saveEEPROM() {
  unsigned address = ADDRESS;
  for (int i = 0; i < NUM_SENS; i++) {
    EEPROM.put(address, calibratedMinimum[i]);
    EEPROM.put(address + 2, calibratedMaximum[i]);
    address += 4;
  }
}

void loadEEPROM() {
  unsigned address = ADDRESS;
  for (int i = 0; i < NUM_SENS; i++) {
    EEPROM.get(address, calibratedMinimum[i]);
    EEPROM.get(address + 2, calibratedMaximum[i]);
    address += 4;
  }
}

void calibration() {
  digitalWrite(LED, HIGH);
  delay(500);
  digitalWrite(LED, LOW);
  delay(500);
  digitalWrite(LED, HIGH);
  const byte SPEED_CALIBR = 40;
  drive(-SPEED_CALIBR, SPEED_CALIBR);
  for (int i = 0; i < NUM_SENS; i++) {
    calibratedMaximum[i] = 0;
    calibratedMinimum[i] = 1023;
  }
  const int loops = 4000;
  for (int j = 0; j < loops; j++) {
    readSensors();
    for (int i = 0; i < NUM_SENS; i++) {
      if (calibratedMaximum[i] < sensors[i])
        calibratedMaximum[i] = sensors[i];
      if (calibratedMinimum[i] > sensors[i])
        calibratedMinimum[i] = sensors[i];
    }
  }
  drive(0, 0);
  saveEEPROM();
  digitalWrite(LED, LOW);
}

int getCmdBT() {
  int retCmd = cmdNo;
  if (BTSerial.available()) {
    char cmdCh = BTSerial.read();
    switch (cmdCh) {
      case btSTART:
        retCmd = cmdLFR;
        break;
      case btTEST:
        retCmd = cmdTest;
        break;
      case btCALIBR:
        retCmd = cmdCalibr;
        break;
      case btREAD_SENS:
        retCmd = cmdReadSensBT;
        break;
      case btINFO:
        retCmd = cmdInfoBT;
        break;
    } // switch
  } // if
}

int getCmdIR() {
  int retCmd = cmdNo;
  if (irrecv.decode(&results)) {
    switch (results.value) {
      case irSTART:
        retCmd = cmdLFR;
        break;
      case irTEST:
        retCmd = cmdTest;
        break;
      case irCALIBR:
        retCmd = cmdCalibr;
        break;
      case irREAD_SENS:
        retCmd = cmdReadSensIR;
        break;
      case irINFO:
        retCmd = cmdInfoIR;
        break;
    }
    irrecv.resume();
  }
  return retCmd;
}

void printInfoBT() {
  BTSerial.println(F("Calibrated sensors:"));
  BTSerial.println(F("N   Min   Max  "));
  for (int i = 0; i < NUM_SENS; i++) {
    BTSerial.print(i);
    BTSerial.print(" : ");
    BTSerial.print(calibratedMinimum[i]);
    BTSerial.print("  ");
    BTSerial.println(calibratedMaximum[i]);
  }
}

void printInfoSerial() {
  Serial.println(F("Calibrated sensors:"));
  Serial.println(F("N   Min   Max  "));
  for (int i = 0; i < NUM_SENS; i++) {
    Serial.print(i);
    Serial.print(" : ");
    Serial.print(calibratedMinimum[i]);
    Serial.print("  ");
    Serial.println(calibratedMaximum[i]);
  }
}
